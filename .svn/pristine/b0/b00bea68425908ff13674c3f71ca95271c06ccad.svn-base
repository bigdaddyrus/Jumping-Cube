// This file contains a SUGGESTION for the structure of your program.  You
// may change any of it, or add additional files to this directory (package),
// as long as you conform to the project specification.

// Comments that start with "//" are intended to be removed from your
// solutions.
package jump61;

import java.util.ArrayList;
import java.util.Random;
/** An automated Player.
 *  @author
 */
class AI extends Player {

    /** Time allotted to all but final search depth (milliseconds). */
    private static final long TIME_LIMIT = 15000;

    /** Number of calls to minmax between checks of elapsed time. */
    private static final long TIME_CHECK_INTERVAL = 10000;

    /** Number of milliseconds in one second. */
    private static final double MILLIS = 1000.0;

    private static enum Strategy {ONE_TWO, EASY, RANDOM,
                                MINIMAX, MINIMAX_CUTOFF}

    private static final Strategy strat = Strategy.MINIMAX;

    private ArrayList<Integer> _moves = new ArrayList<>();

    /** A new player of GAME initially playing COLOR that chooses
     *  moves automatically.
     */

    public AI(Game game, Side color) {
        super(game, color);
    }

    @Override
    void makeMove() {
        // FIXME 
        Board b = getBoard();
        int size = b.size();
        double heur = 0;
        MutableBoard m = new MutableBoard(size);
        m.copy(b);
        if (strat == Strategy.ONE_TWO) {
            getGame().makeMove(1, 2);
            getGame().reportMove(getSide(), 1, 2);
        }
        if (strat == Strategy.EASY) {
            int row = 1;
            int col = 1;
            
            //System.out.println("board m = " + m);
            //System.out.println("board size = " + size);
            for (int i = 1; i < size + 1; i++ ) {
                for (int j = 1; j < size + 1; j++) {
                    //System.out.println("de" + m.isLegal(getSide(), i, j));
                    if (m.isLegal(getSide(), i, j)) {

                        // System.out.println("i: " + i + " j: " + j);
                        // System.out.println("heur i, j "+staticEval(getSide(), m));
                        m.addSpot(getSide(), i, j);
                        if (heur < staticEval(getSide(), m)) {
                            row = i;
                            col = j;
                            heur = staticEval(getSide(), m);

                            // System.out.println("row: " + row + "col: " + col);
                            // System.out.println("heur: " + heur);
                        }
                        m.undo();
                    }
                }
            }
            getGame().makeMove(row, col);
            getGame().reportMove(getSide(), row, col);
        }
        if (strat == Strategy.RANDOM) {
            int move = chooseRand(size, b);
            getGame().makeMove(move);
            getGame().reportMove(getSide(), move);
        }
        if (strat == Strategy.MINIMAX) {
            int move = minmax(getSide(), m, 3, Double.MAX_VALUE, size);
            getGame().makeMove(move);
            getGame().reportMove(getSide(), move);
        }
    }


    /** Return the minimum of CUTOFF and the minmax value of board B
     *  (which must be mutable) for player P to a search depth of D
     *  (where D == 0 denotes statically evaluating just the next move).
     *  If MOVES is not null and CUTOFF is not exceeded, set MOVES to
     *  a list of all highest-scoring moves for P; clear it if
     *  non-null and CUTOFF is exceeded. the contents of B are
     *  invariant over this call. */
    private int minmax(Side p, Board b, int d, double cutoff, int size) {
        // REPLACE WITH SOLUTION
        if (d == 0)
            return guessBestMove(p, b, cutoff, size);

        int move = chooseRand(size, b);
        b.addSpot(p, move);
        double heur = staticEval(p, b);
        double oppoheur = staticEval(p.opposite(), b);
        b.undo();

        for (int n = 0; n < size * size; n++) {
            if (b.isLegal(p, n)) {
                b.addSpot(p, n);
                double currentheur = staticEval(p, b);
                int response = minmax(p.opposite(), b, d-1, oppoheur, size);
                b.addSpot(p, response);
                double responseheur = staticEval(p, b);
                b.undo();
                currentheur = responseheur;
                if (currentheur > heur) {
                    heur = currentheur;
                    oppoheur = staticEval(p.opposssite(), b);
                    move = n;
                    b.undo();
                    if (currentheur >= cutoff) {
                        // break;
                    }
                } else {
                    b.undo();
                }
            }
        }
        return move;
    }

    private int guessBestMove(Side p, Board b, double cutoff, int size) {
        int move = chooseRand(size, b);
        b.addSpot(p, move);
        double heur = staticEval(p, b);
        b.undo();
        for (int n = 0; n < size * size; n++) {
            if (b.isLegal(p, n)) {
                b.addSpot(getSide(), n);
                if (staticEval(p, b) > heur) {
                    move = n;
                    heur = staticEval(p, b);
                }
                if (staticEval(p, b) >= cutoff) {
                    b.undo();
                    // break;
                } else {
                    b.undo();
                }
            }
        }
        return move;
    }

    /** Returns heuristic value of board B for player P.
     *  Higher is better for P. */
    private double staticEval(Side p, Board b) {
        // REPLACE WITH SOLUTION
        if (b.numOfSide(p.opposite()) == 0) {
            return b.numOfSide(p) + 1.0;
        }
        return (double) b.numOfSide(p) / b.numOfSide(p.opposite());
    }

    private int chooseRand(int p, Board b) {
        Random rand = new Random();
        int num  = rand.nextInt(p*p - 1) + 1;
        while (true) {
            if (b.isLegal(getSide(), num)) {
                break;
            }
            num = rand.nextInt(p*p - 1) + 1;
        }
        return num;
    }


}
